# ----------------------------------  
#  代码混淆压缩比，在0和7之间，默认为5，一般不需要改 
#  -optimizationpasses n  
# ----------------------------------  
-optimizationpasses 5


# ----------------------------------  
#   混淆时不使用大小写混合，混淆后的类名为小写 
#   -dontusemixedcaseclassnames  
# ----------------------------------  
-dontusemixedcaseclassnames


# ----------------------------------  
#      指定不去忽略非公共的库类
# 用于告诉ProGuard，不要跳过对非公开类的处理  
# 默认情况下是跳过的，因为程序中不会引用它们，有些情况下人们编写的代码与类库中的类在同一个包下，并且对包中内容加以引用，此时需要加入此条声明。 
# ----------------------------------  
-dontskipnonpubliclibraryclasses


# 指定不去忽略非公共的库的类的成员
-dontskipnonpubliclibraryclassmembers



# ----------------------------------  
#       不做预校验，preverify是proguard的4个步骤之一
#    -dontpreverify  
# ----------------------------------  
#-dontpreverify

# ----------------------------------  
#      输出生成信息  
# 有了verbose这句话，混淆后就会生成映射文件
# 包含有类名->混淆后类名的映射关系
# 然后使用printmapping指定映射文件的名称 
# ---------------------------------- 
-verbose
-printmapping proguardMapping.txt


# 指定混淆时采用的算法，后面的参数是一个过滤器
# 这个过滤器是谷歌推荐的算法，一般不改变
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*

# 保护代码中的Annotation不被混淆，这在JSON实体映射时非常重要，比如fastJson
-keepattributes *Annotation*

# 避免混淆泛型，这在JSON实体映射时非常重要，比如fastJson
-keepattributes Signature

# 抛出异常时保留代码行号，在异常分析中可以方便定位
-keepattributes SourceFile,LineNumberTable


# 混淆时应用侵入式重载
-overloadaggressively


# 优化时允许访问并修改有修饰符的类和类的成员
-allowaccessmodification


# 确定统一的混淆类的成员名称来增加混淆
-useuniqueclassmembernames

# 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名
-keeppackagenames

-ignorewarnings

# 不做收缩（删除注释、未被引用代码）
-dontshrink

# 不做优化（变更代码实现逻辑
-dontoptimize

# 不混淆所有特殊的类
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod

# 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射
-keepclassmembers public class * {void set*(***);*** get*();}

# 保留所有的本地native方法不被混淆
-keepclasseswithmembernames class * {
    native <methods>;
}

#不需要混淆的类
-keep public class com.matrix.cloud.microservice.MicroserviceProguardApplication {
    public static void main(java.lang.String[]);
}

#不需要混淆的类
-keep class **.package-info


#不需要混淆的类
-keep  class org.** {*;}

-keep public class * extends javax.servlet.Servlet

# 枚举类不能被混淆
-keepclassmembers enum * {
   public static **[] values();
   public static ** valueOf(java.lang.String);
}

# 保留Serializable序列化的类不被混淆
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

# 保留实体类和成员不被混淆
-keep public class com.matrix.cloud.microservice.entity.** {
    private *** ***;
    public void set*(***);
    public *** get*();
    public *** is*();
}
